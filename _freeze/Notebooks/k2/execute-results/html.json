{
  "hash": "c06830093b1f55e389750a3ba04695ad",
  "result": {
    "engine": "jupyter",
    "markdown": "# Running k=2\n\n## Loading the data and importing packages\n\n::: {#d916148b-89ed-4fd6-9e23-611643cb2b57 .cell execution_count=1}\n``` {.python .cell-code}\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score, calinski_harabasz_score, davies_bouldin_score, pairwise_distances_argmin_min, silhouette_samples\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport contextily as ctx\nfrom matplotlib.lines import Line2D\nimport matplotlib.dates as mdates\nimport matplotlib.colors as mcolors\nimport matplotlib.cm as cm\nimport folium\n```\n:::\n\n\n::: {#700b2378-533c-40f1-a251-96fe20710f1d .cell execution_count=2}\n``` {.python .cell-code}\nX_ = np.load(\"scaled-df.npy\")\ndf = pd.read_csv(\"bofedales-clean.csv\")\ndf.drop(\"Unnamed: 0\", axis=1, inplace=True)\ndf.head(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Area_m2</th>\n      <th>AUC</th>\n      <th>pct_prot</th>\n      <th>elev_mean_</th>\n      <th>elev_std_m</th>\n      <th>n_wells</th>\n      <th>Ground Water Rights 1966-01-01</th>\n      <th>Ground Water Rights 1967-01-01</th>\n      <th>Ground Water Rights 1968-01-01</th>\n      <th>Ground Water Rights 1969-01-01</th>\n      <th>...</th>\n      <th>NDWI 2019-03</th>\n      <th>NDWI 2019-04</th>\n      <th>NDWI 2019-05</th>\n      <th>NDWI 2019-06</th>\n      <th>NDWI 2019-07</th>\n      <th>NDWI 2019-08</th>\n      <th>NDWI 2019-09</th>\n      <th>NDWI 2019-10</th>\n      <th>NDWI 2019-11</th>\n      <th>NDWI 2019-12</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6300</td>\n      <td>86.769539</td>\n      <td>0.0</td>\n      <td>4162.714286</td>\n      <td>3.953815</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.03193</td>\n      <td>0.026136</td>\n      <td>0.022087</td>\n      <td>0.019181</td>\n      <td>0.023405</td>\n      <td>0.015355</td>\n      <td>-0.000504</td>\n      <td>0.004056</td>\n      <td>0.014678</td>\n      <td>0.010436</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows Ã— 2289 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Running k=2\n\n::: {#9b5d480f-e9ea-4c97-bd72-2188d3e06e03 .cell execution_count=3}\n``` {.python .cell-code}\nK=2\nkmeans = KMeans(n_clusters=K, random_state=42, n_init=20)\ncluster_labels = kmeans.fit_predict(X_)\ncentroids_pca = kmeans.cluster_centers_ \n```\n:::\n\n\n::: {#7a031100-bcd1-48b5-b1eb-fa15a56ee851 .cell execution_count=4}\n``` {.python .cell-code}\ndf[\"cluster\"] = cluster_labels\n```\n:::\n\n\n### Measuring fit\n\n::: {#f219f3a7-3fa1-49a5-8d69-f4e5c46fc1a7 .cell execution_count=5}\n``` {.python .cell-code}\ninertia = kmeans.inertia_\n\navg_sq_dist_per_sample = inertia / X_.shape[0]\n\nprint(f\"Average squared distance per point: {avg_sq_dist_per_sample:.4f}\")\n\nmu = X_.mean(axis=0)\nglobal_mse = ((X_ - mu)**2).sum(axis=1).mean()\nprint(f\"Global mean: {global_mse}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAverage squared distance per point: 907.8377\nGlobal mean: 2159.831865394074\n```\n:::\n:::\n\n\n::: {#17c7cc0e-e793-4ba3-8a25-320dd640dbeb .cell execution_count=6}\n``` {.python .cell-code}\npca2 = PCA(n_components=2).fit_transform(X_)\nplt.scatter(pca2[:,0], pca2[:,1], c=cluster_labels, s=10, cmap='plasma')\nplt.xlabel('PC1'); plt.ylabel('PC2')\nplt.title('K-means clusters in PCA space')\nplt.colorbar()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](k2_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n## Data Visualizations\n\n::: {#7a435fb3-a816-4810-9877-14d2b0b275ee .cell execution_count=7}\n``` {.python .cell-code}\npd.Series(df[\"cluster\"]).value_counts().sort_index().plot.bar(color='skyblue')\nplt.xlabel(\"Cluster\"); plt.ylabel(\"Count\")\nplt.title(\"Number of bofedales per cluster\")\nplt.xticks(rotation=0)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](k2_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n::: {#be05abd9-5f2e-4b02-8564-b05883c92898 .cell execution_count=8}\n``` {.python .cell-code}\ngeometry = [Point(xy) for xy in zip(df.lon, df.lat)]\n\ngdf = gpd.GeoDataFrame(\n    df.copy(), \n    geometry=geometry,\n    crs=\"EPSG:4326\"\n)\n\ngdf[\"size_for_plot\"] = gdf[\"Area_m2\"].apply(lambda a: (a**0.5))\n\nscale_factor = 0.5\ngdf[\"size_for_plot\"] *= scale_factor\n\ngdf_3857 = gdf.to_crs(epsg=3857)\n\nfig, ax = plt.subplots(figsize=(8, 10))\n\ncmap = plt.get_cmap(\"tab10\")\n\nfor i, cluster_id in enumerate(sorted(gdf_3857[\"cluster\"].unique())):\n    subset = gdf_3857[gdf_3857[\"cluster\"] == cluster_id]\n    \n    ax.scatter(\n        subset.geometry.x, \n        subset.geometry.y,\n        s=subset[\"size_for_plot\"],\n        c=[cmap(i)],\n        alpha=0.6,\n        edgecolor=\"k\",\n        linewidth=0.3,\n        label=f\"Cluster {cluster_id}\"\n    )\n\nctx.add_basemap(\n    ax,\n    source=ctx.providers.OpenStreetMap.Mapnik,\n)\n\ncluster_handles = []\nfor idx, cluster_id in enumerate(sorted(gdf_3857[\"cluster\"].unique())):\n    cluster_handles.append(\n        Line2D(\n            [], [], \n            marker=\"o\", \n            markersize=6,\n            color=cmap(idx),\n            linestyle=\"\",\n            label=f\"Cluster {cluster_id}\",\n        )\n    )\n\nlegend1 = ax.legend(handles=cluster_handles, title=\"Cluster ID\", loc=\"upper right\")\nax.add_artist(legend1)\n\nax.set_aspect('equal', adjustable='box')\n\nax.set_axis_off()\nax.set_title(\"Bofedal Clusters\", fontsize=14)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](k2_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n## Feature Importance\n\n::: {#a7f89c43-22ae-4b28-9235-d97379122239 .cell execution_count=9}\n``` {.python .cell-code}\nX_num = (\n    df \n    .select_dtypes('number')\n    .drop(columns=['cluster'], errors='ignore')\n)\n\nscaler = StandardScaler()\nX_scaled = pd.DataFrame(\n    scaler.fit_transform(X_num),\n    columns=X_num.columns, \n    index=X_num.index\n)\n\npca = PCA(n_components=6, svd_solver='full').fit(X_scaled)\n\npc1_loadings = pd.Series(\n    pca.components_[0],\n    index=X_scaled.columns,\n    name='PC1 loading'\n)\n\nprint(pc1_loadings.sort_values(key=np.abs, ascending=False).head(20))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTemp Max 2004-09-01    0.024813\nTemp Max 1981-09-01    0.024785\nTemp Max 1997-09-01    0.024768\nTemp Max 1997-08-01    0.024747\nTemp Max 1982-09-01    0.024742\nTemp Max 2013-01-01    0.024735\nTemp Max 1993-01-01    0.024733\nTemp Max 2015-01-01    0.024730\nTemp Max 1979-01-01    0.024713\nTemp Max 2004-08-01    0.024706\nTemp Max 1987-01-01    0.024690\nTemp Max 2001-01-01    0.024690\nTemp Max 2005-02-01    0.024681\nTemp Max 2011-05-01    0.024677\nTemp Max 2008-01-01    0.024676\nTemp Max 1994-09-01    0.024675\nTemp Max 1992-01-01    0.024672\nTemp Max 2001-08-01    0.024669\nTemp Max 1997-04-01    0.024662\nTemp Max 2003-09-01    0.024662\nName: PC1 loading, dtype: float64\n```\n:::\n:::\n\n\n::: {#48236fc1-c4cf-4abb-9057-6976e4611b97 .cell execution_count=10}\n``` {.python .cell-code}\nfeatures = df.columns\nfamilies = {\n    \"NDVI\":  [c for c in features if c.startswith(\"NDVI\")],\n    \"NDWI\":  [c for c in features if c.startswith(\"NDWI\")],\n    \"GW_rights\": [c for c in features if c.startswith(\"Ground Water Rights\")],\n    \"SW_rights\": [c for c in features if c.startswith(\"Surface Water Rights\")],\n    \"Temperature\": [c for c in features if c.startswith((\"Temp Min\", \"Temp Max\"))],\n    \"PET\": [c for c in features if c.startswith(\"PET\")],\n    \"Precipitation\": [c for c in features if c.startswith(\"Precipitation\")],\n    \"Size\":   [\"Area_m2\", \"AUC\"],\n    \"Elevation\": [c for c in features if c.startswith((\"elev_std_m\", \"elev_mean_\"))],\n    \"Boreholes\": [c for c in features if c.startswith(\"n_wells\")],\n    \"Protected Land\": [c for c in features if c.startswith(\"pct_prot\")]\n}\n\nsummary = {k: pc1_loadings[fam].abs().sum() for k, fam in families.items()}\npd.Series(summary).sort_values(ascending=False)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nTemperature       23.424659\nPET               11.547013\nPrecipitation      7.095087\nSW_rights          1.571825\nGW_rights          1.120259\nNDVI               0.176790\nNDWI               0.094735\nBoreholes          0.020540\nElevation          0.008832\nProtected Land     0.008541\nSize               0.004697\ndtype: float64\n```\n:::\n:::\n\n\n::: {#ed31767b-67ed-4e24-8b78-dc5f3438d8e9 .cell execution_count=11}\n``` {.python .cell-code}\npc1_series = pd.Series(\n    pca.transform(X_scaled)[:, 0],\n    index=X_scaled.index,\n    name=\"PC1\"\n)\n\ncorrs = (\n    X_scaled\n        .join(pc1_series) \n        .corr(method=\"pearson\")\n        .loc[\"PC1\"]\n        .drop(\"PC1\")\n        .abs()\n        .sort_values(ascending=False)\n)\n\nprint(\"\\nTop |correlations| with PC1 (pandas-only):\")\ndisplay(corrs.head(20))\n\nfamily_corrs = (\n    corrs\n      .groupby(corrs.index.str.split().str[0])\n      .sum()\n      .sort_values(ascending=False)\n)\n\nprint(\"\\nPC-1 |corr| summed by variable family:\")\ndisplay(family_corrs.head(20))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nTop |correlations| with PC1 (pandas-only):\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nTemp Max 2004-09-01    0.996245\nTemp Max 1981-09-01    0.995105\nTemp Max 1997-09-01    0.994448\nTemp Max 1997-08-01    0.993573\nTemp Max 1982-09-01    0.993372\nTemp Max 2013-01-01    0.993104\nTemp Max 1993-01-01    0.993047\nTemp Max 2015-01-01    0.992907\nTemp Max 1979-01-01    0.992210\nTemp Max 2004-08-01    0.991960\nTemp Max 1987-01-01    0.991310\nTemp Max 2001-01-01    0.991286\nTemp Max 2005-02-01    0.990943\nTemp Max 2011-05-01    0.990770\nTemp Max 2008-01-01    0.990724\nTemp Max 1994-09-01    0.990708\nTemp Max 1992-01-01    0.990597\nTemp Max 2001-08-01    0.990472\nTemp Max 1997-04-01    0.990195\nTemp Max 2003-09-01    0.990191\nName: PC1, dtype: float64\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nPC-1 |corr| summed by variable family:\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\nTemp             940.498754\nPET              463.611932\nPrecipitation    284.867326\nSurface           63.108687\nGround            44.978350\nNDVI               7.098089\nNDWI               3.803588\nn_wells            0.824699\nlat                0.412471\npct_prot           0.342911\nelev_mean_         0.332095\nlon                0.249555\nAUC                0.135419\nArea_m2            0.053157\nelev_std_m         0.022529\nName: PC1, dtype: float64\n```\n:::\n:::\n\n\nRunning the algorithm with k=2 seems to create clusters that depend almost entirely on temperature, so the seperation does not seem very meaningful.\n\n",
    "supporting": [
      "k2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}