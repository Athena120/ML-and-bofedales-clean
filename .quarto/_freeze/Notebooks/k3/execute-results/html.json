{
  "hash": "661a37b91d33cb4dfe6335ebb588a31a",
  "result": {
    "engine": "jupyter",
    "markdown": "# Running Without Temporal Data (k=3)\n\n::: {#9fff68f7-bf41-42f1-80cb-240b6649b2ff .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport re\nfrom datetime import datetime\nimport numpy as np\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score\nfrom sklearn.preprocessing import StandardScaler\n\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact, widgets, Dropdown\nimport seaborn as sns\nimport plotly.graph_objects as go\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\nimport contextily as ctx\nfrom matplotlib.lines import Line2D\nimport matplotlib.dates as mdates\nimport matplotlib.colors as mcolors\nimport matplotlib.cm as cm\nimport folium\n\nimport plotly.express as px\n```\n:::\n\n\n::: {#779e7c1f-bd2e-417c-920b-7bcddaa180bd .cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.read_csv(\"bofedales-clean.csv\")\ndf.drop([\"Unnamed: 0\"], axis=1, inplace=True)\ndf.head(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Area_m2</th>\n      <th>AUC</th>\n      <th>pct_prot</th>\n      <th>elev_mean_</th>\n      <th>elev_std_m</th>\n      <th>n_wells</th>\n      <th>Ground Water Rights 1966-01-01</th>\n      <th>Ground Water Rights 1967-01-01</th>\n      <th>Ground Water Rights 1968-01-01</th>\n      <th>Ground Water Rights 1969-01-01</th>\n      <th>...</th>\n      <th>NDWI 2019-03</th>\n      <th>NDWI 2019-04</th>\n      <th>NDWI 2019-05</th>\n      <th>NDWI 2019-06</th>\n      <th>NDWI 2019-07</th>\n      <th>NDWI 2019-08</th>\n      <th>NDWI 2019-09</th>\n      <th>NDWI 2019-10</th>\n      <th>NDWI 2019-11</th>\n      <th>NDWI 2019-12</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6300</td>\n      <td>86.769539</td>\n      <td>0.0</td>\n      <td>4162.714286</td>\n      <td>3.953815</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.03193</td>\n      <td>0.026136</td>\n      <td>0.022087</td>\n      <td>0.019181</td>\n      <td>0.023405</td>\n      <td>0.015355</td>\n      <td>-0.000504</td>\n      <td>0.004056</td>\n      <td>0.014678</td>\n      <td>0.010436</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows × 2289 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#50fdc749-f8e0-4de4-aec8-3687e46f5bc2 .cell execution_count=3}\n``` {.python .cell-code}\ndf.drop([\"lat\", \"lon\"], axis=1, inplace=True)\n```\n:::\n\n\n::: {#3e09de09-7016-4766-8b91-291e2d15831f .cell execution_count=4}\n``` {.python .cell-code}\nAGG_POLICY = {\n    # family-name      how to aggregate?  (\"latest\"  or  \"mean\")\n    \"Precipitation\":   \"mean\", \n    \"PET\":             \"mean\",\n    \"Temp Max\":        \"mean\",\n    \"Temp Min\":        \"mean\",\n    \"Surface Water Rights\": \"latest\", \n    \"Ground Water Rights\":  \"latest\",\n    \"NDWI\": \"mean\",\n    \"NDVI\": \"mean\"\n}\n```\n:::\n\n\n::: {#b9eccf61-d43f-4555-ae1d-7e3a18524af4 .cell execution_count=5}\n``` {.python .cell-code}\ndef condense_temporal(df, policy):\n    \"\"\"\n    Collapse temporal columns based on `policy` dict.\n    Returns a NEW DataFrame (original cols dropped, new cols added).\n    \"\"\"\n    df = df.copy()\n    for family, rule in policy.items():\n        pattern = re.compile(rf\"^{re.escape(family)}\\s\")\n        fam_cols = [c for c in df.columns if pattern.match(c)]\n        if not fam_cols:\n            print(f\" No columns found for family: {family}\")\n            continue\n\n        if rule == \"mean\":\n            new_col = df[fam_cols].mean(axis=1)\n            new_name = f\"{family}\"\n        elif rule == \"latest\":\n            def _parse_date(col):\n                s = col.replace(family, \"\").strip()\n                try:\n                    return datetime.strptime(s, \"%Y-%m-%d\")\n                except ValueError:\n                    return datetime.strptime(s, \"%Y-%m\")\n            latest_col = max(fam_cols, key=_parse_date)\n            new_col = df[latest_col]\n            new_name = f\"{family}\"\n        else:\n            raise ValueError(f\"Unknown rule '{rule}' for {family}\")\n\n        df[new_name] = new_col\n        df = df.drop(columns=fam_cols)\n\n    return df\n```\n:::\n\n\n::: {#72cbc9f3-27f8-43ed-b576-2470ca0a8d85 .cell execution_count=6}\n``` {.python .cell-code}\ndf_condensed = condense_temporal(df, AGG_POLICY)\n\ndf_condensed = df_condensed.rename(columns={'pct_prot': 'Percentage Protected Land (of total bofedal)', \n                        'Area_m2': 'Area (m²)', \n                        'AUC': 'Area of basin', \n                        'elev_mean_': 'Average Elevation (m)',\n                        'elev_std_m': 'Elevation Standard Deviation (m)',\n                        'n_wells': 'Number of wells (per catchment area)',\n                        'Precipitation': 'Precipitation (mm)',\n                        'PET': 'PET (mm)',\n                        'Temp Max': 'Maximum Temperature (°C)',\n                        'Temp Min': 'Minimum Temperature (°C)',\n                        'Surface Water Rights': 'Surface Water Rights (L/s)',\n                        'Ground Water Rights': 'Ground Water Rights (L/s)',\n                    })\n\nfeatures_df = (\n    df_condensed\n    .select_dtypes(\"number\")\n    .drop(columns=[\"cluster\"], errors=\"ignore\")\n)\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(features_df)\n```\n:::\n\n\n::: {#073c77e8-ed69-4030-ae16-b6be9a7aecb2 .cell execution_count=7}\n``` {.python .cell-code}\ndef kmeans_diagnostics(\n        features_df,\n        k_range=range(2, 11),\n        scaler=None,\n        random_state=0\n    ):\n    \"\"\"\n    Runs KMeans for each k in k_range, computes cluster-validity metrics,\n    makes diagnostic plots, and returns a DataFrame of the results.\n    \"\"\"\n    X = features_df.select_dtypes('number').copy()\n    \n    scaler = scaler or StandardScaler()\n    X_scaled = scaler.fit_transform(X)\n\n    inertias, sils, dbs, chs = [], [], [], []\n\n    for k in k_range:\n        km = KMeans(n_clusters=k, random_state=random_state, n_init=\"auto\")\n        labels = km.fit_predict(X_scaled)\n\n        inertias.append(km.inertia_)\n        sils.append(silhouette_score(X_scaled, labels))\n        dbs.append(davies_bouldin_score(X_scaled, labels))\n        chs.append(calinski_harabasz_score(X_scaled, labels))\n\n    fig, axes = plt.subplots(1, 2, figsize=(12, 4))\n    \n    axes[0].plot(k_range, inertias, \"o-\")\n    axes[0].set(\n        xlabel=\"k (clusters)\",\n        ylabel=\"Inertia (WCSS)\",\n        title=\"Elbow method\"\n    )\n    \n    axes[1].plot(k_range, sils, \"o-\", label=\"Silhouette ↑\")\n    axes[1].plot(k_range, dbs,  \"o-\", label=\"Davies–Bouldin ↓\")\n    axes[1].plot(k_range, chs,  \"o-\", label=\"Calinski–Harabasz ↑\")\n    axes[1].set(\n        xlabel=\"k (clusters)\",\n        title=\"Cluster-validity indices\"\n    )\n    axes[1].legend()\n    plt.tight_layout()\n    plt.show()\n\n    metrics = pd.DataFrame({\n        \"k\": list(k_range),\n        \"inertia\": inertias,\n        \"silhouette\": sils,\n        \"davies_bouldin\": dbs,\n        \"calinski_harabasz\": chs\n    })\n    return metrics\n\nmetrics = kmeans_diagnostics(\n    features_df,\n    k_range=range(2, 11), \n    random_state=42\n)\n\ndisplay(metrics.sort_values(\"silhouette\", ascending=False))\n```\n\n::: {.cell-output .cell-output-display}\n![](k3_files/figure-html/cell-8-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>k</th>\n      <th>inertia</th>\n      <th>silhouette</th>\n      <th>davies_bouldin</th>\n      <th>calinski_harabasz</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>24487.019836</td>\n      <td>0.567626</td>\n      <td>0.561799</td>\n      <td>1136.279464</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>18113.360620</td>\n      <td>0.323346</td>\n      <td>1.113283</td>\n      <td>1213.057466</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>15573.777886</td>\n      <td>0.312550</td>\n      <td>1.309326</td>\n      <td>1077.738599</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5</td>\n      <td>14130.147582</td>\n      <td>0.283505</td>\n      <td>1.341564</td>\n      <td>955.114949</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>9</td>\n      <td>9894.428930</td>\n      <td>0.274834</td>\n      <td>1.247715</td>\n      <td>816.033288</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8</td>\n      <td>10458.801158</td>\n      <td>0.270735</td>\n      <td>1.232154</td>\n      <td>863.161538</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>7</td>\n      <td>12153.917345</td>\n      <td>0.261101</td>\n      <td>1.425589</td>\n      <td>808.174314</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6</td>\n      <td>13983.328016</td>\n      <td>0.256730</td>\n      <td>1.605868</td>\n      <td>777.117932</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>10</td>\n      <td>9747.609364</td>\n      <td>0.250140</td>\n      <td>1.413670</td>\n      <td>740.220904</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nDue to the above metrics, we use k=3 for the algorithm\n\n::: {#066ac293-c54b-46b5-92b4-604eb3837fde .cell execution_count=8}\n``` {.python .cell-code}\nk=3\nkmeans = KMeans(n_clusters=k, random_state=0, n_init=\"auto\").fit(X_scaled)\ndf_condensed[\"cluster\"] = kmeans.labels_\ndf_condensed.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Area (m²)</th>\n      <th>Area of basin</th>\n      <th>Percentage Protected Land (of total bofedal)</th>\n      <th>Average Elevation (m)</th>\n      <th>Elevation Standard Deviation (m)</th>\n      <th>Number of wells (per catchment area)</th>\n      <th>Precipitation (mm)</th>\n      <th>PET (mm)</th>\n      <th>Maximum Temperature (°C)</th>\n      <th>Minimum Temperature (°C)</th>\n      <th>Surface Water Rights (L/s)</th>\n      <th>Ground Water Rights (L/s)</th>\n      <th>NDWI</th>\n      <th>NDVI</th>\n      <th>cluster</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6300</td>\n      <td>86.769539</td>\n      <td>0.0</td>\n      <td>4162.714286</td>\n      <td>3.953815</td>\n      <td>0.0</td>\n      <td>15.011753</td>\n      <td>76.43679</td>\n      <td>9.74673</td>\n      <td>-5.034592</td>\n      <td>1715.5</td>\n      <td>2424.3</td>\n      <td>-0.003601</td>\n      <td>0.218041</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5400</td>\n      <td>83.176353</td>\n      <td>0.0</td>\n      <td>4073.500000</td>\n      <td>12.406316</td>\n      <td>0.0</td>\n      <td>15.011753</td>\n      <td>76.43679</td>\n      <td>9.74673</td>\n      <td>-5.034592</td>\n      <td>1715.5</td>\n      <td>2424.3</td>\n      <td>-0.046695</td>\n      <td>0.205608</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6300</td>\n      <td>103.719438</td>\n      <td>0.0</td>\n      <td>4278.571429</td>\n      <td>6.161102</td>\n      <td>0.0</td>\n      <td>15.011753</td>\n      <td>76.43679</td>\n      <td>9.74673</td>\n      <td>-5.034592</td>\n      <td>1715.5</td>\n      <td>2424.3</td>\n      <td>0.035979</td>\n      <td>0.180369</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e904f896-1406-4e57-9dce-71683ea789fa .cell execution_count=9}\n``` {.python .cell-code}\nsns.pairplot(\n    df_condensed.assign(cluster=kmeans.labels_),\n    vars=[\"Maximum Temperature (°C)\", \"Precipitation (mm)\", \"PET (mm)\"],\n    hue=\"cluster\", palette=\"Set2\"\n); plt.show()\n\ncentroids = pd.DataFrame(kmeans.cluster_centers_, columns=features_df.columns)\nprint(\"\\nCentroid means (k = 3):\")\ndisplay(centroids.T)\n```\n\n::: {.cell-output .cell-output-display}\n![](k3_files/figure-html/cell-10-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCentroid means (k = 3):\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Area (m²)</th>\n      <td>-0.002319</td>\n      <td>0.013485</td>\n      <td>-0.094332</td>\n    </tr>\n    <tr>\n      <th>Area of basin</th>\n      <td>-0.351732</td>\n      <td>0.279181</td>\n      <td>0.028752</td>\n    </tr>\n    <tr>\n      <th>Percentage Protected Land (of total bofedal)</th>\n      <td>0.931268</td>\n      <td>-0.680084</td>\n      <td>-0.555803</td>\n    </tr>\n    <tr>\n      <th>Average Elevation (m)</th>\n      <td>0.495675</td>\n      <td>-0.304058</td>\n      <td>-0.766003</td>\n    </tr>\n    <tr>\n      <th>Elevation Standard Deviation (m)</th>\n      <td>-0.110698</td>\n      <td>0.100587</td>\n      <td>-0.094223</td>\n    </tr>\n    <tr>\n      <th>Number of wells (per catchment area)</th>\n      <td>-0.266041</td>\n      <td>-0.254487</td>\n      <td>3.801576</td>\n    </tr>\n    <tr>\n      <th>Precipitation (mm)</th>\n      <td>0.786080</td>\n      <td>-0.356371</td>\n      <td>-2.236167</td>\n    </tr>\n    <tr>\n      <th>PET (mm)</th>\n      <td>-0.371031</td>\n      <td>-0.126565</td>\n      <td>3.448225</td>\n    </tr>\n    <tr>\n      <th>Maximum Temperature (°C)</th>\n      <td>-0.461297</td>\n      <td>-0.032838</td>\n      <td>3.276376</td>\n    </tr>\n    <tr>\n      <th>Minimum Temperature (°C)</th>\n      <td>-0.807797</td>\n      <td>0.357518</td>\n      <td>2.368550</td>\n    </tr>\n    <tr>\n      <th>Surface Water Rights (L/s)</th>\n      <td>1.095665</td>\n      <td>-0.810426</td>\n      <td>-0.570421</td>\n    </tr>\n    <tr>\n      <th>Ground Water Rights (L/s)</th>\n      <td>-0.257634</td>\n      <td>-0.263003</td>\n      <td>3.815851</td>\n    </tr>\n    <tr>\n      <th>NDWI</th>\n      <td>-0.341034</td>\n      <td>0.285102</td>\n      <td>-0.089108</td>\n    </tr>\n    <tr>\n      <th>NDVI</th>\n      <td>-0.283815</td>\n      <td>0.231884</td>\n      <td>-0.030463</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Results\n- Cluster 0: Cool & wet bofedales\n- Cluster 1: Moderate sites balancing both factors\n- Cluster 2: Hot & extremely dry outliers\n\n::: {#0df378f2-4943-4429-8f1d-a96b9e72c8c0 .cell execution_count=10}\n``` {.python .cell-code}\ndf_condensed[\"lat\"] = pd.read_csv(\"bofedales-clean.csv\")[\"lat\"]\ndf_condensed[\"lon\"] = pd.read_csv(\"bofedales-clean.csv\")[\"lon\"]\ndf = df_condensed\n```\n:::\n\n\n::: {#022cdc43-0c5e-4cb6-bf2e-fbb32da7dcd4 .cell execution_count=11}\n``` {.python .cell-code}\ngeometry = [Point(xy) for xy in zip(df.lon, df.lat)]\n\ngdf = gpd.GeoDataFrame(\n    df.copy(), \n    geometry=geometry,\n    crs=\"EPSG:4326\"\n)\n\ngdf[\"size_for_plot\"] = gdf[\"Area (m²)\"].apply(lambda a: (a**0.5))\n\nscale_factor = 0.5\ngdf[\"size_for_plot\"] *= scale_factor\n\ngdf_3857 = gdf.to_crs(epsg=3857)\nfig, ax = plt.subplots(figsize=(8, 10))\n\ncmap = plt.get_cmap(\"tab10\")\n\nfor i, cluster_id in enumerate(sorted(gdf_3857[\"cluster\"].unique())):\n    subset = gdf_3857[gdf_3857[\"cluster\"] == cluster_id]\n    \n    ax.scatter(\n        subset.geometry.x,\n        subset.geometry.y,\n        s=subset[\"size_for_plot\"],\n        c=[cmap(i)],\n        alpha=0.6,\n        edgecolor=\"k\",\n        linewidth=0.3,\n        label=f\"Cluster {cluster_id}\"\n    )\n\nctx.add_basemap(\n    ax,\n    source=ctx.providers.OpenStreetMap.Mapnik,\n)\n\ncluster_handles = []\nfor idx, cluster_id in enumerate(sorted(gdf_3857[\"cluster\"].unique())):\n    cluster_handles.append(\n        Line2D(\n            [], [], \n            marker=\"o\", \n            markersize=6, \n            color=cmap(idx),\n            linestyle=\"\",\n            label=f\"Cluster {cluster_id}\",\n        )\n    )\n\nlegend1 = ax.legend(handles=cluster_handles, title=\"Cluster ID\", loc=\"upper right\")\nax.add_artist(legend1)\n\nax.set_aspect('equal', adjustable='box')\n\nax.set_axis_off()\nax.set_title(\"Bofedal Clusters\", fontsize=14)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](k3_files/figure-html/cell-12-output-1.png){}\n:::\n:::\n\n\n::: {#1aa45bb5-57d6-4925-b582-e3ed65bddf34 .cell execution_count=12}\n``` {.python .cell-code}\npalette = [\n    \"indianred\",\"lightsalmon\",\"mediumaquamarine\",\"powderblue\",\"darkslateblue\",\n    \"mediumturquoise\",\"lavender\",\"palevioletred\",\"olivedrab\",\"lightpink\",\n    \"gold\",\"mediumvioletred\",\"lightcoral\",\"tomato\",\"sandybrown\",\n    \"darkseagreen\",\"lemonchiffon\",\"darksalmon\",\"darkred\",\"firebrick\",\n    \"oldlace\",\"royalblue\",\"mediumpurple\",\"plum\"\n]\n\nagg = (df_condensed\n       .groupby(\"cluster\")\n       .mean()\n       .reset_index())\n\n\ndef make_trace(var, colour):\n    return go.Bar(\n        x=agg[\"cluster\"].astype(str),\n        y=agg[var],\n        marker=dict(color=colour, line=dict(color=\"black\")),\n        name=var\n    )\n\nvars_list = list(agg.columns[1:])\ndefault_var = vars_list[0]\n\nfig = go.Figure(make_trace(default_var, palette[0]))\n\nbuttons = []\nfor i, var in enumerate(vars_list):\n    buttons.append(\n        dict(\n            label  = var,\n            method = \"update\",\n            args   = [\n                {\"y\": [agg[var]],\n                 \"marker.color\": [palette[i % len(palette)]]},\n                {\n                  \"title\": f\"Average {var} per cluster\",\n                  \"yaxis\": {\"title\": {\"text\": var}}\n                }\n            ]\n        )\n    )\n\nfig.update_layout(\n    yaxis_title=default_var,\n    xaxis=dict(title=\"Cluster\", type=\"category\"),\n    updatemenus=[dict(\n        type=\"dropdown\",\n        direction=\"down\",\n        showactive=True,\n        buttons=buttons,\n        x=0.0, xanchor=\"left\",\n        y=1.15, yanchor=\"top\"\n    )],\n    margin=dict(t=90, r=20, l=60, b=50),\n    height=450, width=700,\n    showlegend=False\n)\n\nfig\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        </script>\n        <script type=\"module\">import \"https://cdn.plot.ly/plotly-3.0.1.min\"</script>\n        \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-3.0.1.min.js\"></script>                <div id=\"0e60f1ab-50d4-4354-99bc-2e2e25f6f3e3\" class=\"plotly-graph-div\" style=\"height:450px; width:700px;\"></div>            <script type=\"text/javascript\">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById(\"0e60f1ab-50d4-4354-99bc-2e2e25f6f3e3\")) {                    Plotly.newPlot(                        \"0e60f1ab-50d4-4354-99bc-2e2e25f6f3e3\",                        [{\"marker\":{\"color\":\"indianred\",\"line\":{\"color\":\"black\"}},\"name\":\"Area (m\\u00b2)\",\"x\":[\"0\",\"1\",\"2\"],\"y\":{\"dtype\":\"f8\",\"bdata\":\"rSs0t5Ph8UAC6\\u002fswNAz0QAAAAAAAodNA\"},\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermap\":[{\"type\":\"scattermap\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"xaxis\":{\"title\":{\"text\":\"Cluster\"},\"type\":\"category\"},\"margin\":{\"t\":90,\"r\":20,\"l\":60,\"b\":50},\"yaxis\":{\"title\":{\"text\":\"Area (m\\u00b2)\"}},\"updatemenus\":[{\"buttons\":[{\"args\":[{\"y\":[[73241.23222748814,82115.26195899773,20100.0]],\"marker.color\":[\"indianred\"]},{\"title\":\"Average Area (m\\u00b2) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Area (m\\u00b2)\"}}}],\"label\":\"Area (m\\u00b2)\",\"method\":\"update\"},{\"args\":[{\"y\":[[94.88816736815166,107.6196012030372,102.5782425845679]],\"marker.color\":[\"lightsalmon\"]},{\"title\":\"Average Area of basin per cluster\",\"yaxis\":{\"title\":{\"text\":\"Area of basin\"}}}],\"label\":\"Area of basin\",\"method\":\"update\"},{\"args\":[{\"y\":[[92.50292901577511,12.383784695857589,18.441358024691358]],\"marker.color\":[\"mediumaquamarine\"]},{\"title\":\"Average Percentage Protected Land (of total bofedal) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Percentage Protected Land (of total bofedal)\"}}}],\"label\":\"Percentage Protected Land (of total bofedal)\",\"method\":\"update\"},{\"args\":[{\"y\":[[4432.624236865963,4231.971510028444,4115.190648151951]],\"marker.color\":[\"powderblue\"]},{\"title\":\"Average Average Elevation (m) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Average Elevation (m)\"}}}],\"label\":\"Average Elevation (m)\",\"method\":\"update\"},{\"args\":[{\"y\":[[5.75912800731215,7.54276620493656,5.900717267327373]],\"marker.color\":[\"darkslateblue\"]},{\"title\":\"Average Elevation Standard Deviation (m) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Elevation Standard Deviation (m)\"}}}],\"label\":\"Elevation Standard Deviation (m)\",\"method\":\"update\"},{\"args\":[{\"y\":[[0.0,10.715261958997722,3778.0]],\"marker.color\":[\"mediumturquoise\"]},{\"title\":\"Average Number of wells (per catchment area) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Number of wells (per catchment area)\"}}}],\"label\":\"Number of wells (per catchment area)\",\"method\":\"update\"},{\"args\":[{\"y\":[[28.25053793672387,19.308873678620504,4.607066788116947]],\"marker.color\":[\"lavender\"]},{\"title\":\"Average Precipitation (mm) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Precipitation (mm)\"}}}],\"label\":\"Precipitation (mm)\",\"method\":\"update\"},{\"args\":[{\"y\":[[79.1028144779086,81.91270565893895,123.14270766129039]],\"marker.color\":[\"palevioletred\"]},{\"title\":\"Average PET (mm) per cluster\",\"yaxis\":{\"title\":{\"text\":\"PET (mm)\"}}}],\"label\":\"PET (mm)\",\"method\":\"update\"},{\"args\":[{\"y\":[[10.233713530663744,11.44649553057895,20.808289826481577]],\"marker.color\":[\"olivedrab\"]},{\"title\":\"Average Maximum Temperature (\\u00b0C) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Maximum Temperature (\\u00b0C)\"}}}],\"label\":\"Maximum Temperature (\\u00b0C)\",\"method\":\"update\"},{\"args\":[{\"y\":[[-5.740811766763749,-2.5109093634936053,3.0435060229617656]],\"marker.color\":[\"lightpink\"]},{\"title\":\"Average Minimum Temperature (\\u00b0C) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Minimum Temperature (\\u00b0C)\"}}}],\"label\":\"Minimum Temperature (\\u00b0C)\",\"method\":\"update\"},{\"args\":[{\"y\":[[25980.086266656774,325.69329199569853,3549.340068692]],\"marker.color\":[\"gold\"]},{\"title\":\"Average Surface Water Rights (L\\u002fs) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Surface Water Rights (L\\u002fs)\"}}}],\"label\":\"Surface Water Rights (L\\u002fs)\",\"method\":\"update\"},{\"args\":[{\"y\":[[58.927014218009475,47.561427486712226,8543.18777779]],\"marker.color\":[\"mediumvioletred\"]},{\"title\":\"Average Ground Water Rights (L\\u002fs) per cluster\",\"yaxis\":{\"title\":{\"text\":\"Ground Water Rights (L\\u002fs)\"}}}],\"label\":\"Ground Water Rights (L\\u002fs)\",\"method\":\"update\"},{\"args\":[{\"y\":[[0.00612018450766164,0.05584029551980774,0.026130587061307255]],\"marker.color\":[\"lightcoral\"]},{\"title\":\"Average NDWI per cluster\",\"yaxis\":{\"title\":{\"text\":\"NDWI\"}}}],\"label\":\"NDWI\",\"method\":\"update\"},{\"args\":[{\"y\":[[0.2716571276942125,0.30851136153044306,0.2897902124991045]],\"marker.color\":[\"tomato\"]},{\"title\":\"Average NDVI per cluster\",\"yaxis\":{\"title\":{\"text\":\"NDVI\"}}}],\"label\":\"NDVI\",\"method\":\"update\"},{\"args\":[{\"y\":[[-18.385942440282168,-19.046357738197848,-19.813721857730663]],\"marker.color\":[\"sandybrown\"]},{\"title\":\"Average lat per cluster\",\"yaxis\":{\"title\":{\"text\":\"lat\"}}}],\"label\":\"lat\",\"method\":\"update\"},{\"args\":[{\"y\":[[-69.25029710776158,-69.15253089909218,-68.97004269173037]],\"marker.color\":[\"darkseagreen\"]},{\"title\":\"Average lon per cluster\",\"yaxis\":{\"title\":{\"text\":\"lon\"}}}],\"label\":\"lon\",\"method\":\"update\"}],\"direction\":\"down\",\"showactive\":true,\"type\":\"dropdown\",\"x\":0.0,\"xanchor\":\"left\",\"y\":1.15,\"yanchor\":\"top\"}],\"height\":450,\"width\":700,\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('0e60f1ab-50d4-4354-99bc-2e2e25f6f3e3');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };            </script>        </div>\n```\n:::\n:::\n\n\n\n",
    "supporting": [
      "k3_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}